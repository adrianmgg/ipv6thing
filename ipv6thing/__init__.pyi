from collections.abc import Iterable
from typing import overload

class Address:
    def __init__(self, addr: int | str, /) -> None: ...
    def __eq__(self, other: object, /) -> bool: ...
    def __add__(self, other: int, /) -> Address: ...
    def __radd__(self, other: int, /) -> Address: ...
    def __sub__(self, other: int, /) -> Address: ...
    def __int__(self, /) -> int: ...
    def str_long(self, /) -> str: ...
    def str_short(self, /) -> str: ...

class Network:
    @overload
    def __init__(self, addr: str) -> None: ...
    @overload
    def __init__(self, addr: str | int | Address, prefix_len: int) -> None: ...
    @property
    def prefix_mask(self) -> int: ...
    @property
    def prefix_len(self) -> int: ...
    @property
    def base_address(self) -> Address: ...
    @overload
    def __getitem__(self, k: int, /) -> Address: ...
    @overload
    def __getitem__(self, k: slice, /) -> Iterable[Address]: ...
